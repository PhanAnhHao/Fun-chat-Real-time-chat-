import { useEffect, useState } from 'react';
import {
    collection as firestoreCollection,
    query,
    where,
    orderBy,
    onSnapshot,
} from 'firebase/firestore';
import { db } from '../../firebase/config';

const useFirestore = (collectionName, condition) => {
    // T·∫°o state ƒë·ªÉ l∆∞u documents realtime t·ª´ Firestore
    const [documents, setDocuments] = useState([]);

    useEffect(() => {
        // T·∫°o reference t·ªõi collection c·∫ßn nghe
        const collectionRef = firestoreCollection(db, collectionName);

        // M·∫∑c ƒë·ªãnh: query t·∫•t c·∫£ document, s·∫Øp x·∫øp theo 'createdAt'
        let q = query(collectionRef, orderBy('createdAt'));

        if (condition) {
            // L·∫•y ra c√°c tr∆∞·ªùng t·ª´ condition (fieldName, operator, compareValue)
            const { fieldName, operator, compareValue } = condition;

            // Ki·ªÉm tra compareValue c√≥ r·ªóng kh√¥ng
            // - N·∫øu null/undefined th√¨ ko c·∫ßn query
            // - N·∫øu l√† array nh∆∞ng r·ªóng th√¨ c≈©ng kh√¥ng query
            const isCompareValueEmpty =
                compareValue == null ||
                (Array.isArray(compareValue) && compareValue.length === 0);

            if (!fieldName || !operator || isCompareValueEmpty) {
                // N·∫øu ƒëi·ªÅu ki·ªán thi·∫øu ho·∫∑c compareValue kh√¥ng h·ª£p l·ªá
                // üëâ Clear documents, kh√¥ng l·∫Øng nghe Firestore
                setDocuments([]);
                return;
            }

            // N·∫øu condition h·ª£p l·ªá:
            // üëâ T·∫°o query v·ªõi where + orderBy c√πng l√∫c
            q = query(
                collectionRef,
                where(fieldName, operator, compareValue),
                orderBy('createdAt')
            );
        }

        // ƒêƒÉng k√Ω listener realtime v·ªõi onSnapshot
        const unsubscribe = onSnapshot(q, (snapshot) => {
            // snapshot ch·ª©a t·∫•t c·∫£ documents hi·ªán c√≥
            const docs = snapshot.docs.map((doc) => ({
                ...doc.data(), // l·∫•y data document
                id: doc.id,    // th√™m id ƒë·ªÉ d·ªÖ d√πng
            }));

            // C·∫≠p nh·∫≠t state documents
            setDocuments(docs);
        });

        // Clean function: h·ªßy listener khi component unmount ho·∫∑c deps ƒë·ªïi
        return () => unsubscribe();
    }, [collectionName, condition]); // ch·∫°y l·∫°i khi collectionName ho·∫∑c condition ƒë·ªïi

    // Tr·∫£ v·ªÅ danh s√°ch documents realtime
    return documents;
};

export default useFirestore;